#!/usr/bin/env node
'use strict';

var fs = require('fs');
var path = require('path');
var axios = require('axios');
var child_process = require('child_process');
var commander = require('commander');
require('@decaf-ts/utils');
require('js-yaml');

/**
 * @module build-scripts
 * @description Custom build scripts for the fabric-weaver project.
 * @summary This module extends the BuildScripts class from @decaf-ts/utils to provide custom build functionality for the fabric-weaver project. It includes utilities for building command-line interfaces and handling different module formats (CommonJS and ES Modules).
 */
/**
 * @description Enumeration of module modes.
 * @summary Defines the different module formats supported in the build process.
 * @enum {string}
 * @readonly
 * @memberOf module:build-scripts
 */
var Modes;
(function (Modes) {
    /** CommonJS module format */
    Modes["CJS"] = "commonjs";
    /** ECMAScript module format (ES2022) */
    Modes["ESM"] = "es2022";
})(Modes || (Modes = {}));

/**
 * @description Enum for log levels.
 * @summary Defines different levels of logging for the application.
 * @enum {string}
 * @memberOf @decaf-ts/utils
 */
var LogLevel;
(function (LogLevel) {
    /** Error events that are likely to cause problems. */
    LogLevel["error"] = "error";
    /** Routine information, such as ongoing status or performance. */
    LogLevel["info"] = "info";
    /** Additional relevant information. */
    LogLevel["verbose"] = "verbose";
    /** Debug or trace information. */
    LogLevel["debug"] = "debug";
    /** way too verbose or silly information. */
    LogLevel["silly"] = "silly";
})(LogLevel || (LogLevel = {}));
/**
 * @description Numeric values associated with log levels.
 * @summary Provides a numeric representation of log levels for comparison and filtering.
 * @const {Object} NumericLogLevels
 * @property {number} error - Numeric value for error level (0).
 * @property {number} info - Numeric value for info level (2).
 * @property {number} verbose - Numeric value for verbose level (4).
 * @property {number} debug - Numeric value for debug level (5).
 * @property {number} silly - Numeric value for silly level (8).
 * @memberOf @decaf-ts/utils
 */
const NumericLogLevels = {
    error: 2,
    info: 4,
    verbose: 6,
    debug: 7,
    silly: 9,
};
var LoggingMode;
(function (LoggingMode) {
    LoggingMode["RAW"] = "raw";
    LoggingMode["JSON"] = "json";
})(LoggingMode || (LoggingMode = {}));
/**
 * @description Default theme for styling log output.
 * @summary Defines the default color and style settings for various components of log messages.
 * @const DefaultTheme
 * @typedef {Theme} DefaultTheme
 * @property {Object} class - Styling for class names.
 * @property {number} class.fg - Foreground color code for class names (4).
 * @property {Object} id - Styling for identifiers.
 * @property {number} id.fg - Foreground color code for identifiers (36).
 * @property {Object} stack - Styling for stack traces (empty object).
 * @property {Object} timestamp - Styling for timestamps (empty object).
 * @property {Object} message - Styling for different types of messages.
 * @property {Object} message.error - Styling for error messages.
 * @property {number} message.error.fg - Foreground color code for error messages (34).
 * @property {Object} method - Styling for method names (empty object).
 * @property {Object} logLevel - Styling for different log levels.
 * @property {Object} logLevel.error - Styling for error level logs.
 * @property {number} logLevel.error.fg - Foreground color code for error level logs (6).
 * @property {Object} logLevel.info - Styling for info level logs (empty object).
 * @property {Object} logLevel.verbose - Styling for verbose level logs (empty object).
 * @property {Object} logLevel.debug - Styling for debug level logs.
 * @property {number} logLevel.debug.fg - Foreground color code for debug level logs (7).
 * @memberOf @decaf-ts/utils
 */
const DefaultTheme = {
    class: {
        fg: 34,
    },
    id: {
        fg: 36,
    },
    stack: {},
    timestamp: {},
    message: {
        error: {
            fg: 31,
        },
    },
    method: {},
    logLevel: {
        error: {
            fg: 31,
            style: ["bold"],
        },
        info: {},
        verbose: {},
        debug: {
            fg: 33,
        },
    },
};
/**
 * @description Default configuration for logging.
 * @summary Defines the default settings for the logging system, including verbosity, log level, styling, and timestamp format.
 * @const DefaultLoggingConfig
 * @typedef {LoggingConfig} DefaultLoggingConfig
 * @property {number} verbose - Verbosity level (0).
 * @property {LogLevel} level - Default log level (LogLevel.info).
 * @property {boolean} style - Whether to apply styling to log output (false).
 * @property {boolean} timestamp - Whether to include timestamps in log messages (true).
 * @property {string} timestampFormat - Format for timestamps ("HH:mm:ss.SSS").
 * @property {boolean} context - Whether to include context information in log messages (true).
 * @property {Theme} theme - The theme to use for styling log messages (DefaultTheme).
 * @memberOf @decaf-ts/utils
 */
const DefaultLoggingConfig = {
    verbose: 0,
    level: LogLevel.info,
    logLevel: true,
    mode: LoggingMode.RAW,
    style: false,
    separator: " - ",
    timestamp: true,
    timestampFormat: "HH:mm:ss.SSS",
    context: true,
    theme: DefaultTheme,
};

/**
 * @description ANSI escape code for resetting text formatting.
 * @summary This constant holds the ANSI escape sequence used to reset all text formatting to default.
 * @const AnsiReset
 * @memberOf module:StyledString
 */
const AnsiReset = "\x1b[0m";
/**
 * @description Standard foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard foreground colors.
 * @const StandardForegroundColors
 * @property {number} black - ANSI code for black text (30).
 * @property {number} red - ANSI code for red text (31).
 * @property {number} green - ANSI code for green text (32).
 * @property {number} yellow - ANSI code for yellow text (33).
 * @property {number} blue - ANSI code for blue text (34).
 * @property {number} magenta - ANSI code for magenta text (35).
 * @property {number} cyan - ANSI code for cyan text (36).
 * @property {number} white - ANSI code for white text (37).
 * @memberOf module:StyledString
 */
const StandardForegroundColors = {
    black: 30,
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    magenta: 35,
    cyan: 36,
    white: 37,
};
/**
 * @description Bright foreground color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright foreground colors.
 * @const BrightForegroundColors
 * @property {number} black - ANSI code for bright black text (90).
 * @property {number} red - ANSI code for bright red text (91).
 * @property {number} green - ANSI code for bright green text (92).
 * @property {number} yellow - ANSI code for bright yellow text (93).
 * @property {number} blue - ANSI code for bright blue text (94).
 * @property {number} magenta - ANSI code for bright magenta text (95).
 * @property {number} cyan - ANSI code for bright cyan text (96).
 * @property {number} white - ANSI code for bright white text (97).
 * @memberOf module:@StyledString
 */
const BrightForegroundColors = {
    brightBlack: 90,
    brightRed: 91,
    brightGreen: 92,
    brightYellow: 93,
    brightBlue: 94,
    brightMagenta: 95,
    brightCyan: 96,
    brightWhite: 97,
};
/**
 * @description Standard background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for standard background colors.
 * @const StandardBackgroundColors
 * @property {number} bgBlack - ANSI code for black background (40).
 * @property {number} bgRed - ANSI code for red background (41).
 * @property {number} bgGreen - ANSI code for green background (42).
 * @property {number} bgYellow - ANSI code for yellow background (43).
 * @property {number} bgBlue - ANSI code for blue background (44).
 * @property {number} bgMagenta - ANSI code for magenta background (45).
 * @property {number} bgCyan - ANSI code for cyan background (46).
 * @property {number} bgWhite - ANSI code for white background (47).
 * @memberOf module:@StyledString
 */
const StandardBackgroundColors = {
    bgBlack: 40,
    bgRed: 41,
    bgGreen: 42,
    bgYellow: 43,
    bgBlue: 44,
    bgMagenta: 45,
    bgCyan: 46,
    bgWhite: 47,
};
/**
 * @description Bright background color codes for ANSI text formatting.
 * @summary This object maps color names to their corresponding ANSI color codes for bright background colors.
 * @const BrightBackgroundColors
 * @property {number} bgBrightBlack - ANSI code for bright black background (100).
 * @property {number} bgBrightRed - ANSI code for bright red background (101).
 * @property {number} bgBrightGreen - ANSI code for bright green background (102).
 * @property {number} bgBrightYellow - ANSI code for bright yellow background (103).
 * @property {number} bgBrightBlue - ANSI code for bright blue background (104).
 * @property {number} bgBrightMagenta - ANSI code for bright magenta background (105).
 * @property {number} bgBrightCyan - ANSI code for bright cyan background (106).
 * @property {number} bgBrightWhite - ANSI code for bright white background (107).
 * @memberOf module:@StyledString
 */
const BrightBackgroundColors = {
    bgBrightBlack: 100,
    bgBrightRed: 101,
    bgBrightGreen: 102,
    bgBrightYellow: 103,
    bgBrightBlue: 104,
    bgBrightMagenta: 105,
    bgBrightCyan: 106,
    bgBrightWhite: 107,
};
/**
 * @description Text style codes for ANSI text formatting.
 * @summary This object maps style names to their corresponding ANSI codes for various text styles.
 * @const styles
 * @property {number} reset - ANSI code to reset all styles (0).
 * @property {number} bold - ANSI code for bold text (1).
 * @property {number} dim - ANSI code for dim text (2).
 * @property {number} italic - ANSI code for italic text (3).
 * @property {number} underline - ANSI code for underlined text (4).
 * @property {number} blink - ANSI code for blinking text (5).
 * @property {number} inverse - ANSI code for inverse colors (7).
 * @property {number} hidden - ANSI code for hidden text (8).
 * @property {number} strikethrough - ANSI code for strikethrough text (9).
 * @property {number} doubleUnderline - ANSI code for double underlined text (21).
 * @property {number} normalColor - ANSI code to reset color to normal (22).
 * @property {number} noItalicOrFraktur - ANSI code to turn off italic (23).
 * @property {number} noUnderline - ANSI code to turn off underline (24).
 * @property {number} noBlink - ANSI code to turn off blink (25).
 * @property {number} noInverse - ANSI code to turn off inverse (27).
 * @property {number} noHidden - ANSI code to turn off hidden (28).
 * @property {number} noStrikethrough - ANSI code to turn off strikethrough (29).
 * @memberOf module:@StyledString
 */
const styles = {
    reset: 0,
    bold: 1,
    dim: 2,
    italic: 3,
    underline: 4,
    blink: 5,
    inverse: 7,
    hidden: 8,
    strikethrough: 9,
    doubleUnderline: 21,
    normalColor: 22,
    noItalicOrFraktur: 23,
    noUnderline: 24,
    noBlink: 25,
    noInverse: 27,
    noHidden: 28,
    noStrikethrough: 29,
};

/**
 * @description Applies a basic ANSI color code to text.
 * @summary This function takes a string, an ANSI color code number, and an optional background flag.
 * It returns the text wrapped in the appropriate ANSI escape codes for either foreground or background coloring.
 * This function is used for basic 16-color ANSI formatting.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The ANSI color code number.
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeANSI
 * @memberOf module:@StyledString
 */
function colorizeANSI(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the ANSI scale: ${n}. ignoring...`);
        return text;
    }
    if (bg && ((n > 30 && n <= 40)
        || (n > 90 && n <= 100))) {
        n = n + 10;
    }
    return `\x1b[${n}m${text}${AnsiReset}`;
}
/**
 * @description Applies a 256-color ANSI code to text.
 * @summary This function takes a string and a color number (0-255) and returns the text
 * wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} n - The color number (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorize256
 * @memberOf module:@StyledString
 */
function colorize256(text, n, bg = false) {
    if (isNaN(n)) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    if (n < 0 || n > 255) {
        console.warn(`Invalid color number on the 256 scale: ${n}. ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};5;${n}m${text}${AnsiReset}`;
}
/**
 * @description Applies an RGB color ANSI code to text.
 * @summary This function takes a string and RGB color values (0-255 for each component)
 * and returns the text wrapped in ANSI escape codes for either foreground or background coloring.
 *
 * @param {string} text - The text to be colored.
 * @param {number} r - The red component of the color (0-255).
 * @param {number} g - The green component of the color (0-255).
 * @param {number} b - The blue component of the color (0-255).
 * @param {boolean} [bg=false] - If true, applies the color to the background instead of the foreground.
 * @return {string} The text wrapped in ANSI color codes.
 *
 * @function colorizeRGB
 * @memberOf module:StyledString
 */
function colorizeRGB(text, r, g, b, bg = false) {
    if (isNaN(r) || isNaN(g) || isNaN(b)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    if ([r, g, b].some(v => v < 0 || v > 255)) {
        console.warn(`Invalid RGB color values: r=${r}, g=${g}, b=${b}. Ignoring...`);
        return text;
    }
    return `\x1b[${bg ? 48 : 38};2;${r};${g};${b}m${text}${AnsiReset}`;
}
/**
 * @description Applies an ANSI style code to text.
 * @summary This function takes a string and a style code (either a number or a key from the styles object)
 * and returns the text wrapped in the appropriate ANSI escape codes for that style.
 *
 * @param {string} text - The text to be styled.
 * @param {number | string} n - The style code or style name.
 * @return {string} The text wrapped in ANSI style codes.
 *
 * @function applyStyle
 * @memberOf module:StyledString
 */
function applyStyle(text, n) {
    const styleCode = typeof n === "number" ? n : styles[n];
    return `\x1b[${styleCode}m${text}${AnsiReset}`;
}
/**
 * @description Removes all ANSI formatting codes from text.
 * @summary This function takes a string that may contain ANSI escape codes for formatting
 * and returns a new string with all such codes removed, leaving only the plain text content.
 * It uses a regular expression to match and remove ANSI escape sequences.
 *
 * @param {string} text - The text potentially containing ANSI formatting codes.
 * @return {string} The input text with all ANSI formatting codes removed.
 *
 * @function clear
 * @memberOf module:StyledString
 */
function clear(text) {
    // Regular expression to match ANSI escape codes
    // eslint-disable-next-line no-control-regex
    const ansiRegex = /\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])/g;
    return text.replace(ansiRegex, '');
}
/**
 * @description Applies raw ANSI escape codes to text.
 * @summary This function takes a string and a raw ANSI escape code, and returns the text
 * wrapped in the provided raw ANSI code and the reset code. This allows for applying custom
 * or complex ANSI formatting that may not be covered by other utility functions.
 *
 * @param {string} text - The text to be formatted.
 * @param {string} raw - The raw ANSI escape code to be applied.
 * @return {string} The text wrapped in the raw ANSI code and the reset code.
 *
 * @function raw
 * @memberOf module:StyledString
 */
function raw(text, raw) {
    return `${raw}${text}${AnsiReset}`;
}

/**
 * @class StyledString
 * @description A class that extends string functionality with ANSI color and style options.
 * @summary StyledString provides methods to apply various ANSI color and style options to text strings.
 * It implements the ColorizeOptions interface and proxies native string methods to the underlying text.
 * This class allows for chaining of styling methods and easy application of colors and styles to text.
 *
 * @implements {ColorizeOptions}
 * @param {string} text - The initial text string to be styled.
 */
class StyledString {
    constructor(text) {
        this.text = text;
        // Basic colors
        Object.entries(StandardForegroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        Object.entries(BrightForegroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.foreground(code),
            });
        });
        // Background colors
        Object.entries(StandardBackgroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        Object.entries(BrightBackgroundColors).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.background(code),
            });
        });
        // Styles
        Object.entries(styles).forEach(([name, code]) => {
            Object.defineProperty(this, name, {
                get: () => this.style(code),
            });
        });
    }
    /**
     * @description Clears all styling from the text.
     * @summary Removes all ANSI color and style codes from the text.
     * @return {StyledString} The StyledString instance with cleared styling.
     */
    clear() {
        this.text = clear(this.text);
        return this;
    }
    /**
     * @description Applies raw ANSI codes to the text.
     * @summary Allows direct application of ANSI escape sequences to the text.
     * @param {string} rawAnsi - The raw ANSI escape sequence to apply.
     * @return {StyledString} The StyledString instance with the raw ANSI code applied.
     */
    raw(rawAnsi) {
        this.text = raw(this.text, rawAnsi);
        return this;
    }
    /**
     * @description Applies a foreground color to the text.
     * @summary Sets the text color using ANSI color codes.
     * @param {number} n - The ANSI color code for the foreground color.
     * @return {StyledString} The StyledString instance with the foreground color applied.
     */
    foreground(n) {
        this.text = colorizeANSI(this.text, n);
        return this;
    }
    /**
     * @description Applies a background color to the text.
     * @summary Sets the background color of the text using ANSI color codes.
     * @param {number} n - The ANSI color code for the background color.
     * @return {StyledString} The StyledString instance with the background color applied.
     */
    background(n) {
        this.text = colorizeANSI(this.text, n, true);
        return this;
    }
    /**
     * @description Applies a text style to the string.
     * @summary Sets text styles such as bold, italic, or underline using ANSI style codes.
     * @param {number | string} n - The style code or key from the styles object.
     * @return {StyledString} The StyledString instance with the style applied.
     */
    style(n) {
        if (typeof n === "string" && !(n in styles)) {
            console.warn(`Invalid style: ${n}`);
            return this;
        }
        this.text = applyStyle(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color foreground color to the text.
     * @summary Sets the text color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color foreground applied.
     */
    color256(n) {
        this.text = colorize256(this.text, n);
        return this;
    }
    /**
     * @description Applies a 256-color background color to the text.
     * @summary Sets the background color using the extended 256-color palette.
     * @param {number} n - The color number from the 256-color palette.
     * @return {StyledString} The StyledString instance with the 256-color background applied.
     */
    bgColor256(n) {
        this.text = colorize256(this.text, n, true);
        return this;
    }
    /**
     * @description Applies an RGB foreground color to the text.
     * @summary Sets the text color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB foreground color applied.
     */
    rgb(r, g, b) {
        this.text = colorizeRGB(this.text, r, g, b);
        return this;
    }
    /**
     * @description Applies an RGB background color to the text.
     * @summary Sets the background color using RGB values.
     * @param {number} r - The red component (0-255).
     * @param {number} g - The green component (0-255).
     * @param {number} b - The blue component (0-255).
     * @return {StyledString} The StyledString instance with the RGB background color applied.
     */
    bgRgb(r, g, b) {
        this.text = colorizeRGB(this.text, r, g, b, true);
        return this;
    }
    /**
     * @description Converts the StyledString to a regular string.
     * @summary Returns the underlying text with all applied styling.
     * @return {string} The styled text as a regular string.
     */
    toString() {
        return this.text;
    }
}
/**
 * @description Applies styling to a given text string.
 * @summary This function takes a string and returns a StyledString object, which is an enhanced
 * version of the original string with additional methods for applying various ANSI color and style
 * options. It sets up a mapper object with methods for different styling operations and then
 * defines properties on the text string to make these methods accessible.
 *
 * @param {string[]} t  The input text to be styled.
 * @return {StyledString} A StyledString object with additional styling methods.
 *
 * @function style
 *
 * @memberOf StyledString
 */
function style(...t) {
    return new StyledString(t.join(" "));
}

/**
 * @description A minimal logger implementation.
 * @summary MiniLogger is a lightweight logging class that implements the VerbosityLogger interface.
 * It provides basic logging functionality with support for different log levels and verbosity.
 *
 * @class
 */
class MiniLogger {
    /**
     * @description Creates a new MiniLogger instance.
     * @summary Initializes a MiniLogger with the given class name, optional configuration, and method name.
     *
     * @param context - The name of the class using this logger.
     * @param [conf] - Optional logging configuration. Defaults to Info level and verbosity 0.
     * @param [id] - Optional unique identifier for the logger instance.
     */
    constructor(context, conf, id) {
        this.context = context;
        this.conf = conf;
        this.id = id;
    }
    config(key) {
        if (this.conf && key in this.conf)
            return this.conf[key];
        return Logging.getConfig()[key];
    }
    for(method, config) {
        method = method
            ? typeof method === "string"
                ? method
                : method.name
            : undefined;
        return Logging.for([this.context, method].join("."), this.id, config);
    }
    /**
     * @description Creates a formatted log string.
     * @summary Generates a log string with timestamp, colored log level, and message.
     *
     * @param level - The log level as a string.
     * @param message
     * @param stack
     * @return A formatted log string.
     */
    createLog(level, message, stack) {
        const log = [];
        const style = this.config("style");
        if (this.config("timestamp")) {
            const date = new Date().toISOString();
            const timestamp = style ? Logging.theme(date, "timestamp", level) : date;
            log.push(timestamp);
        }
        if (this.config("logLevel")) {
            const lvl = style
                ? Logging.theme(level, "logLevel", level)
                : level;
            log.push(lvl);
        }
        if (this.config("context")) {
            const context = style
                ? Logging.theme(this.context, "class", level)
                : this.context;
            log.push(context);
        }
        if (this.id) {
            {
                const id = style
                    ? Logging.theme(this.id, "id", level)
                    : this.id;
                log.push(id);
            }
        }
        const msg = style
            ? Logging.theme(typeof message === "string" ? message : message.message, "message", level)
            : typeof message === "string"
                ? message
                : message.message;
        log.push(msg);
        if (stack || message instanceof Error) {
            stack = style
                ? Logging.theme((stack || message.stack), "stack", level)
                : stack;
            log.push(`\nStack trace:\n${stack}`);
        }
        return log.join(this.config("separator"));
    }
    /**
     * @description Logs a message with the specified log level.
     * @summary Checks if the message should be logged based on the current log level,
     * then uses the appropriate console method to output the log.
     *
     * @param level - The log level of the message.
     * @param msg - The message to be logged.
     * @param stack
     */
    log(level, msg, stack) {
        if (NumericLogLevels[this.config("level")] <
            NumericLogLevels[level])
            return;
        let method;
        switch (level) {
            case LogLevel.info:
                method = console.log;
                break;
            case LogLevel.verbose:
            case LogLevel.debug:
                method = console.debug;
                break;
            case LogLevel.error:
                method = console.error;
                break;
            default:
                throw new Error("Invalid log level");
        }
        method(this.createLog(level, msg, stack));
    }
    /**
     * @description LLogs a `way too verbose` or a silly message.
     * @summary Logs a message at the Silly level if the current verbosity allows it.
     *
     * @param msg - The message to be logged.
     * @param verbosity - The verbosity level of the message (default: 0).
     */
    silly(msg, verbosity = 0) {
        if (this.config("verbose") >= verbosity)
            this.log(LogLevel.verbose, msg);
    }
    /**
     * @description Logs a verbose message.
     * @summary Logs a message at the Verbose level if the current verbosity allows it.
     *
     * @param msg - The message to be logged.
     * @param verbosity - The verbosity level of the message (default: 0).
     */
    verbose(msg, verbosity = 0) {
        if (this.config("verbose") >= verbosity)
            this.log(LogLevel.verbose, msg);
    }
    /**
     * @description Logs an info message.
     * @summary Logs a message at the Info level.
     *
     * @param msg - The message to be logged.
     */
    info(msg) {
        this.log(LogLevel.info, msg);
    }
    /**
     * @description Logs a debug message.
     * @summary Logs a message at the Debug level.
     *
     * @param msg - The message to be logged.
     */
    debug(msg) {
        this.log(LogLevel.debug, msg);
    }
    /**
     * @description Logs an error message.
     * @summary Logs a message at the Error level.
     *
     * @param msg - The message to be logged.
     */
    error(msg) {
        this.log(LogLevel.error, msg);
    }
    setConfig(config) {
        this.conf = { ...(this.conf || {}), ...config };
    }
}
/**
 * @description A static class for managing logging operations.
 * @summary The Logging class provides a centralized logging mechanism with support for
 * different log levels and verbosity. It uses a singleton pattern to maintain a global
 * logger instance and allows creating specific loggers for different classes and methods.
 *
 * @class
 */
class Logging {
    /**
     * @description Factory function for creating logger instances.
     * @summary A function that creates new VerbosityLogger instances. By default, it creates a MiniLogger.
     */
    static { this._factory = (object, config, id) => {
        return new MiniLogger(object, config, id);
    }; }
    /**
     * @description Configuration for the logging system.
     * @summary Stores the global verbosity level and log level settings.
     */
    static { this._config = DefaultLoggingConfig; }
    /**
     * @description Private constructor to prevent instantiation.
     * @summary Ensures that the Logging class cannot be instantiated as it's designed to be used statically.
     */
    constructor() { }
    setFactory(factory) {
        Logging._factory = factory;
    }
    /**
     * @description Setter for the logging configuration.
     * @summary Allows updating the global logging configuration.
     *
     * @param config - An object containing verbosity and log level settings.
     */
    static setConfig(config) {
        Object.assign(this._config, config);
    }
    static getConfig() {
        return Object.assign({}, this._config);
    }
    /**
     * @description Retrieves or creates the global logger instance.
     * @summary Returns the existing global logger or creates a new one if it doesn't exist.
     *
     * @return The global VerbosityLogger instance.
     */
    static get() {
        this.global = this.global ? this.global : this._factory("Logging");
        return this.global;
    }
    /**
     * @description Logs a verbose message.
     * @summary Delegates the verbose logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     * @param verbosity - The verbosity level of the message (default: 0).
     */
    static verbose(msg, verbosity = 0) {
        return this.get().verbose(msg, verbosity);
    }
    /**
     * @description Logs an info message.
     * @summary Delegates the info logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static info(msg) {
        return this.get().info(msg);
    }
    /**
     * @description Logs a debug message.
     * @summary Delegates the debug logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static debug(msg) {
        return this.get().debug(msg);
    }
    /**
     * @description Logs a silly message.
     * @summary Delegates the debug logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static silly(msg) {
        return this.get().silly(msg);
    }
    /**
     * @description Logs an error message.
     * @summary Delegates the error logging to the global logger instance.
     *
     * @param msg - The message to be logged.
     */
    static error(msg) {
        return this.get().error(msg);
    }
    static for(object, id, config) {
        object = typeof object === "string" ? object : object.name;
        id = typeof id === "string" ? id : undefined;
        config = typeof id === "object" ? id : config;
        return this._factory(object, config, id);
    }
    /**
     * @description Creates a logger for a specific reason or context.
     *
     * @summary This static method creates a new logger instance using the factory function,
     * based on a given reason or context.
     *
     * @param reason - A string describing the reason or context for creating this logger.
     * @param id
     * @returns A new VerbosityLogger or ClassLogger instance.
     */
    static because(reason, id) {
        return this._factory(reason, this._config, id);
    }
    static theme(text, type, loggerLevel, template = DefaultTheme) {
        if (!this._config.style)
            return text;
        const logger = Logging.get().for(this.theme);
        function apply(txt, option, value) {
            try {
                const t = txt;
                let c = style(t);
                function applyColor(val, isBg = false) {
                    let f = isBg ? c.background : c.foreground;
                    if (!Array.isArray(val)) {
                        return f.call(c, value);
                    }
                    switch (val.length) {
                        case 1:
                            f = isBg ? c.bgColor256 : c.color256;
                            return f(val[0]);
                        case 3:
                            f = isBg ? c.bgRgb : c.rgb;
                            return c.rgb(val[0], val[1], val[2]);
                        default:
                            logger.error(`Not a valid color option: ${option}`);
                            return style(t);
                    }
                }
                function applyStyle(v) {
                    if (typeof v === "number") {
                        c = c.style(v);
                    }
                    else {
                        c = c[v];
                    }
                }
                switch (option) {
                    case "bg":
                    case "fg":
                        return applyColor(value).text;
                    case "style":
                        if (Array.isArray(value)) {
                            value.forEach(applyStyle);
                        }
                        else {
                            applyStyle(value);
                        }
                        return c.text;
                    default:
                        logger.error(`Not a valid theme option: ${option}`);
                        return t;
                }
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
            }
            catch (e) {
                logger.error(`Error applying style: ${option} with value ${value}`);
                return txt;
            }
        }
        const individualTheme = template[type];
        if (!individualTheme || !Object.keys(individualTheme).length) {
            return text;
        }
        let actualTheme = individualTheme;
        const logLevels = Object.assign({}, LogLevel);
        if (Object.keys(individualTheme)[0] in logLevels)
            actualTheme =
                individualTheme[loggerLevel] || {};
        return Object.keys(actualTheme).reduce((acc, key) => {
            const val = actualTheme[key];
            if (val)
                return apply(acc, key, val);
            return acc;
        }, text);
    }
}

Logging.for("yaml");

/**
 * @description Log levels for Fabric components.
 * @summary Enumeration of available log levels for Hyperledger Fabric components.
 * These levels determine the verbosity and type of information logged by the system.
 * @enum {string}
 * @readonly
 * @memberOf module:fabric-general
 */
var FabricLogLevel;
(function (FabricLogLevel) {
    /** Standard information messages */
    FabricLogLevel["INFO"] = "info";
    /** Warning messages for potential issues */
    FabricLogLevel["WARNING"] = "warning";
    /** Detailed debugging information */
    FabricLogLevel["DEBUG"] = "debug";
    /** Error messages for issues that don't stop execution */
    FabricLogLevel["ERROR"] = "error";
    /** Fatal error messages that may stop execution */
    FabricLogLevel["FATAL"] = "fatal";
    /** Critical error messages that require immediate attention */
    FabricLogLevel["CRITICAL"] = "critical";
})(FabricLogLevel || (FabricLogLevel = {}));
var FabricBinaries;
(function (FabricBinaries) {
    FabricBinaries["CLIENT"] = "fabric-ca-client";
    FabricBinaries["SERVER"] = "fabric-ca-server";
    FabricBinaries["ORDERER"] = "orderer";
    FabricBinaries["PEER"] = "peer";
    FabricBinaries["CONFIGTXGEN"] = "configtxgen";
    FabricBinaries["OSNADMIN"] = "osnadmin";
})(FabricBinaries || (FabricBinaries = {}));

/**
 * @module fabric-weaver
 * @description This module serves as the main entry point for the fabric-weaver library, providing TypeScript integration with Hyperledger Fabric.
 * @summary Aggregates and exports functionality for managing Hyperledger Fabric infrastructures.
 *
 * The module includes:
 * 1. Utility functions and types from the "./utils" directory:
 *    - Helper functions for interacting with Fabric binaries.
 *    - Utilities for generating and managing Docker Compose files.
 *    - Functions to assist in creating, maintaining, and updating Hyperledger Fabric networks.
 *
 * 2. Core functionality from the "./core" directory:
 *    - TypeScript interfaces and classes representing Fabric concepts.
 *    - Implementation of Fabric operations and interactions.
 *
 * 3. A VERSION constant:
 *    - Represents the current version of the fabric-weaver module.
 *    - Useful for version checking and compatibility purposes.
 *
 * This structure provides a comprehensive toolkit for working with Hyperledger Fabric in TypeScript,
 * allowing developers to easily set up, manage, and interact with Fabric networks and components.
 */
/**
 * @const VERSION
 * @name VERSION
 * @description Represents the current version of the fabric-weaver module.
 * @summary The actual version number is replaced during the build process.
 * @type {string}
 */
const VERSION = "##VERSION##";

/**
 * @module fabric-cli
 * @description Command-line interface for Fabric setup and update operations
 * @summary This module provides a CLI for managing Hyperledger Fabric installations.
 * It exposes commands for updating the Fabric install script and setting up Fabric
 * components. The module uses the Commander.js library to parse command-line
 * arguments and execute the appropriate actions.
 *
 * Key exports:
 * - {@link updateFabric}: Function to update the Fabric install script
 * - {@link setupFabric}: Function to set up Fabric components
 *
 * @example
 * // Update Fabric install script
 * node fabric.js update
 *
 * // Setup Fabric components
 * node fabric.js setup --fabric-version 2.5.12 --ca-version 1.5.15 --components binary docker
 *
 * @mermaid
 * sequenceDiagram
 *   participant User
 *   participant CLI
 *   participant UpdateFabric
 *   participant SetupFabric
 *   User->>CLI: Run command
 *   CLI->>CLI: Parse arguments
 *   alt update command
 *     CLI->>UpdateFabric: Call updateFabric()
 *     UpdateFabric->>UpdateFabric: Download install script
 *     UpdateFabric->>UpdateFabric: Make script executable
 *   else setup command
 *     CLI->>SetupFabric: Call setupFabric(config)
 *     SetupFabric->>SetupFabric: Install components
 *   end
 *   CLI->>User: Display result
 */
const INSTALL_SCRIPT = path.join(__dirname, "..", "bin", "install-fabric.sh");
// Default configuration
const defaultConfig = {
    fabricVersion: "2.5.12",
    caVersion: "1.5.15",
    components: ["binary"],
};
const program = new commander.Command();
program
    .version(VERSION)
    .description("Fabric setup and update utility")
    .option("-f, --fabric-version <version>", "Fabric version", defaultConfig.fabricVersion)
    .option("-c, --ca-version <version>", "Fabric CA version", defaultConfig.caVersion)
    .option("--components <components...>", "Components to install (binary, docker, podman, samples)", defaultConfig.components);
program
    .command("update")
    .description("Update the Fabric install script")
    .action(async () => {
    await updateFabric();
});
program
    .command("setup")
    .description("Set up Fabric components")
    .action(async (options) => {
    const config = {
        ...defaultConfig,
        fabricVersion: options.fabricVersion || program.opts().fabricVersion,
        caVersion: options.caVersion || program.opts().caVersion,
        components: options.components || program.opts().components,
    };
    await setupFabric(config);
});
program.parse(process.argv);
/**
 * @function updateFabric
 * @description Updates the Fabric install script by downloading the latest version
 * @summary This function removes the existing install script (if present), downloads
 * the latest version from the Hyperledger Fabric GitHub repository, and makes it executable.
 * @returns {Promise<void>}
 * @throws {Error} If the download fails or file operations encounter issues
 * @memberOf module:fabric-cli
 *
 * @example
 * await updateFabric();
 *
 * @mermaid
 * sequenceDiagram
 *   participant Function
 *   participant FileSystem
 *   participant GitHub
 *   Function->>FileSystem: Check if script exists
 *   alt Script exists
 *     Function->>FileSystem: Remove existing script
 *   end
 *   Function->>GitHub: Download latest script
 *   GitHub-->>Function: Return script content
 *   Function->>FileSystem: Write new script
 *   Function->>FileSystem: Make script executable
 */
async function updateFabric() {
    console.log("Executing update...");
    const SCRIPT_URL = "https://raw.githubusercontent.com/hyperledger/fabric/main/scripts/install-fabric.sh";
    // Remove the existing file if it exists
    if (fs.existsSync(INSTALL_SCRIPT)) {
        console.log("Removing existing install-fabric.sh...");
        fs.unlinkSync(INSTALL_SCRIPT);
    }
    // Download the new file
    console.log("Downloading new install-fabric.sh...");
    try {
        const response = await axios.get(SCRIPT_URL, {
            responseType: "arraybuffer",
        });
        fs.writeFileSync(INSTALL_SCRIPT, response.data);
        console.log("Download successful.");
        // Make the file executable
        fs.chmodSync(INSTALL_SCRIPT, "755");
        console.log("Made install-fabric.sh executable.");
    }
    catch (error) {
        console.error("Error: Failed to download the file.");
        console.error(error);
        process.exit(1);
    }
}
/**
 * @function setupFabric
 * @description Sets up Fabric components based on the provided configuration
 * @summary This function installs the specified Fabric components using the
 * install-fabric.sh script. It iterates through the components list and executes
 * the script for each component with the specified Fabric and CA versions.
 * After installation, it copies configuration files to the root config folder.
 * @param {Object} config - Configuration object for Fabric setup
 * @param {string} config.fabricVersion - Fabric version to install
 * @param {string} config.caVersion - Fabric CA version to install
 * @param {string[]} config.components - List of components to install
 * @returns {Promise<void>}
 * @throws {Error} If the install script is not found, component installation fails, or file copying fails
 * @memberOf module:fabric-cli
 *
 * @example
 * const config = {
 *   fabricVersion: "2.5.12",
 *   caVersion: "1.5.15",
 *   components: ["binary", "docker"]
 * };
 * await setupFabric(config);
 *
 * @mermaid
 * sequenceDiagram
 *   participant Function
 *   participant FileSystem
 *   participant InstallScript
 *   Function->>FileSystem: Check if install script exists
 *   alt Script not found
 *     Function->>Function: Log error and exit
 *   else Script found
 *     loop For each component
 *       Function->>InstallScript: Execute install script
 *       InstallScript-->>Function: Installation result
 *       alt Installation failed
 *         Function->>Function: Log error and exit
 *       end
 *     end
 *     Function->>FileSystem: Copy config files
 *     alt Copy failed
 *       Function->>Function: Log error
 *     end
 *   end
 *   Function->>Function: Log success message
 */
async function setupFabric(config) {
    console.log("Executing setup...");
    if (fs.existsSync(INSTALL_SCRIPT)) {
        console.log("Executing install-fabric.sh...");
        for (const component of config.components) {
            console.log(`Installing component: ${component}`);
            try {
                child_process.execSync(`bash "${INSTALL_SCRIPT}" "${component}" -f "${config.fabricVersion}" -c "${config.caVersion}"`, { stdio: "inherit" });
            }
            catch (error) {
                console.error(`Error installing component: ${component}`);
                console.error(error);
                process.exit(1);
            }
        }
        try {
            const srcConfigDir = path.join(__dirname, "..", "src", "configs");
            const destConfigDir = path.join(__dirname, "..", "config");
            // Create the destination directory if it doesn't exist
            if (!fs.existsSync(destConfigDir)) {
                fs.mkdirSync(destConfigDir, { recursive: true });
            }
            // Copy files from src/configs to rootDir/config
            fs.readdirSync(srcConfigDir).forEach((file) => {
                const srcPath = path.join(srcConfigDir, file);
                const destPath = path.join(destConfigDir, file);
                fs.copyFileSync(srcPath, destPath);
                console.log(`Copied ${file} to ${destConfigDir}`);
            });
            console.log("Configuration files copied successfully.");
        }
        catch (error) {
            console.error("Error copying configuration files:");
            console.error(error);
        }
        console.log("All components installed successfully.");
    }
    else {
        console.error("Error: install-fabric.sh not found. Please run the update command first.");
        console.error(INSTALL_SCRIPT);
        process.exit(1);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
